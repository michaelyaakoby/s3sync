{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Launch fast-copying NFS-to-S3 synchronization agent",

    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Target VPC where the NFS-to-S3 agent be installed"
        },
        "SubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Subnet to which the agent be connected"
        },
        "KeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair within the AWS account; You should login to the NFS-to-S3 agent as 'ec2-admin' using these keys."
        }
    },

    "Mappings": {
        "RegionMap": {
            "us-west-2": {"ami": "ami-775e4f16"},
            "us-east-1": {"ami": "ami-2051294a"}
        }
    },

    "Resources": {
        "AgentIamRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Action": [ "sts:AssumeRole" ],
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ec2.amazonaws.com" ] }
                    }],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:DescribeAssociation",
                                        "ssm:GetDocument",
                                        "ssm:ListAssociations",
                                        "ssm:UpdateAssociationStatus",
                                        "ssm:UpdateInstanceInformation"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2messages:AcknowledgeMessage",
                                        "ec2messages:DeleteMessage",
                                        "ec2messages:FailMessage",
                                        "ec2messages:GetEndpoint",
                                        "ec2messages:GetMessages",
                                        "ec2messages:SendReply"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInstanceStatus",
                                        "cloudformation:SignalResource"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ds:CreateComputer",
                                        "ds:DescribeDirectories"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:AbortMultipartUpload",
                                        "s3:ListMultipartUploadParts",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:ListBucket",
                                        "s3:ListAllMyBuckets"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "SNS:Publish"
                                    ],
                                    "Resource": { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }
                                }
                            ]
                        },
                        "PolicyName": {
                            "Fn::Join": [ "_", [ "s3sync", { "Ref": "AWS::StackName" }]]
                        }
                    }]
            },
            "Type": "AWS::IAM::Role"
        },

        "AgentInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [{ "Ref": "AgentIamRole" } ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },

        "AgentSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for the s3sync agent",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Fn::Join": [ "_", [ "s3sync",{ "Ref": "AWS::StackName" } ] ]}
                    }
                ]
            }
        },

        "AgentInstance": {
            "DependsOn": [
                "AgentSecurityGroup", "AgentInstanceProfile"
            ],
            "Type": "AWS::EC2::Instance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT15M"
                }
            },
            "Properties": {
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "ami" ]
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "True",
                        "DeleteOnTermination": "True",
                        "SubnetId": { "Ref": "SubnetId" }, "DeviceIndex": "0",
                        "GroupSet": [ { "Ref": "AgentSecurityGroup" } ] }
                ],
                "InstanceType": "t2.medium",
                "IamInstanceProfile": { "Ref": "AgentInstanceProfile" },
                "KeyName": { "Ref": "KeyPair" },
                "Monitoring": "false",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe",
								"# script configuration",
                                {"Fn::Join": [ "", [ "name=", { "Ref": "AWS::StackName" } ] ]},
                                {"Fn::Join": [ "", [ "region=", { "Ref": "AWS::Region" } ] ]},
                                {"Fn::Join": [ "", [ "callbackTopic=", { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] } ] ]},
                                {"Fn::Join": [ "", [ "vpcId=", { "Ref": "VpcId" } ] ]},
                                {"Fn::Join": [ "", [ "subnetId=", { "Ref": "SubnetId" } ] ]},
								"instanceId=`curl http://169.254.169.254/latest/meta-data/instance-id`",
                                "",
                                "# Install python's boto3 - used by python scripts to access AWS",
                                "curl 'https://bootstrap.pypa.io/get-pip.py' -o 'get-pip.py'",
                                "python get-pip.py",
                                "pip install boto3",
                                "mkdir ~/.aws",
                                "echo '[default]' > ~/.aws/config",
                                "echo 'region='$region >> ~/.aws/config",
                                "",
                                "# Install aws ssm agent (needed for ec2-run-command)",
                                "mkdir /tmp/ssm",
                                "curl https://amazon-ssm-us-west-2.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm",
                                "yum install -y /tmp/ssm/amazon-ssm-agent.rpm",
                                "systemctl enable amazon-ssm-agent",
                                "systemctl start amazon-ssm-agent",
                                "",
                                "# Install NFS service",
                                "yum -y install nfs-utils",
                                "systemctl enable rpcbind",
                                "systemctl start rpcbind",
                                "systemctl enable nfs-server.service",
                                "systemctl start nfs-server.service",
                                "",
                                "# Configure the xcp catalog directory",
                                "mkdir /catalog",
                                "echo \"/catalog localhost(rw,no_root_squash,async)\" > /etc/exports",
                                "exportfs -a",
                                "",
                                "# Install and activate XCP",
                                "python -c \"import boto3; s3 = boto3.resource('s3'); s3.meta.client.download_file('repo.datafabric.io', 'xcp/xcp-license.xwic', 'xcp-license.xwic'); s3.meta.client.download_file('repo.datafabric.io', 'xcp/xcp-1.1-4b4038d_6_Jan_2016-s3-experimental-build-5.tgz', 'xcp.tgz')\"",
                                "tar xzvf xcp*.tgz",
                                "ln -s `pwd`/xcp-*/linux/xcp /usr/bin/xcp",
                                "mkdir -p /opt/NetApp/xFiles/xcp",
                                "cp xcp-license.xwic /opt/NetApp/xFiles/xcp/license",
                                "xcp activate",
                                "sed -i 's/^catalog.*/catalog = localhost:\\/catalog/' /opt/NetApp/xFiles/xcp/xcp.ini",
                                "",
                                "# Install git, clone the s3sync repository and chmod+x the scripts",
                                "yum -y install git",
                                "git clone https://github.com/michaelyaakoby/s3sync /opt/NetApp/s3sync",
                                "chmod +x /opt/NetApp/s3sync/agent/scripts/*",
                                "",
                                "# Notify cloudformation and the provided SNS that setup is complete",
                                "/opt/NetApp/s3sync/agent/scripts/setup-completed.py --stack-name=$name --sns-topic $callbackTopic"
                            ]
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Fn::Join": [ "_", [ "s3sync", { "Ref": "AWS::StackName" } ] ]}
                    }
                ]
            }
        }
    },

   
    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 NFS-to-S3 agent",
            "Value": { "Ref": "AgentInstance" }
        },
        "InstanceProfile": {
            "Description": "Instance profle used by the NFS-to-S3 agent",
            "Value": { "Ref": "AgentInstanceProfile" }
        }
    }
}